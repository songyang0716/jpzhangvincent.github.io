# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
ts <- spT.time(t.series = 12, segments = 1)
nItr <- 200  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude, scale.transform = "SQRT",
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
ts <- spT.time(t.series = 12, segments = 1)
nItr <- 200  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
ts <- spT.time(t.series = 12, segments = 1)
nItr <- 200  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude, scale.transform="SQRT",
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
ts <- spT.time(t.series = 12, segments = 1)
nItr <- 200  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
gdwater.gp$fitted[,1][3]
gdwater.gp2$fitted[,1][3]
rm(post.gp2)
gdwater.ar <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="AR",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
#ts <- spT.time(t.series = 12, segments = 1)
nItr <- 3000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 1000  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
gdwater.ar <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="AR",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
gdwater.gp$fitted[,1][3]
gdwater.ar$fitted[,1][3]
gdwater.ar$y[,1][3]
gdwater.ar$y[3]
gdwater.ar$Y[3]
y_nomis = nall_data[!is.na(nall_data$WSEL),"WSEL"]
which(!is.na(nall_data$WSEL)
)
gdwater.gp$fitted[,1][which(!is.na(nall_data$WSEL))]
y_nomis = nall_data[!is.na(nall_data$WSEL),"WSEL"]
yfit_gp = gdwater.gp$fitted[,1][which(!is.na(nall_data$WSEL))]
plot(gdwater.gp)
plot(gdwater.gp,residuals=TRUE)
log(4)
nall_data$WSEL_log <- log(nall_data$WSEL)
nall_data$WSEL_log <- sapply(nall_data$WSEL, fun(x) if(!is.na(x)) log(x))
nall_data$WSEL_log <- sapply(nall_data$WSEL, fun(x) log(x) if(!is.na(x)) )
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
#ts <- spT.time(t.series = 12, segments = 1)
nItr <- 3000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 1000  # number of burn-in from the MCMC samples, used as 1000 in the paper
nall_data$WSEL_log <- sapply(nall_data$WSEL, fun(x) {if(!is.na(x)) log(x)})
nall_data$WSEL_log <- sapply(nall_data$WSEL, fun(x) {ifelse(is.na(x), NA,log(x))})
nall_data$WSEL_log <- sapply(nall_data$WSEL, fun(x){ifelse(is.na(x), NA,log(x))})
nall_data$WSEL_log <- sapply(nall_data$WSEL, function(x){ifelse(is.na(x), NA,log(x))} )
nall_data
log(302.5)
# Bayesian spatio-Temporal Modeling
# We want to intepolate/predict the missing values and be able to do forcasting
set.seed(11)
#ts <- spT.time(t.series = 12, segments = 1)
nItr <- 3000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 1000  # number of burn-in from the MCMC samples, used as 1000 in the paper
nall_data$WSEL_log <- sapply(nall_data$WSEL, function(x){ifelse(is.na(x), NA, log(x))})
gdwater.gp <- spT.Gibbs(formula= WSEL_log~ 1, data=nall_data, model="GP",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
gdwater.ar <- spT.Gibbs(formula= WSEL_log~ 1, data=nall_data, model="AR",
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
y_nomis = nall_data[!is.na(nall_data$WSEL),"WSEL"]
yfit_gp = gdwater.gp$fitted[,1][which(!is.na(nall_data$WSEL))]
plot(gdwater.gp)
plot(gdwater.gp,residuals=TRUE)
y_nomis
yfit_gp
y_nomis = nall_data[!is.na(nall_data$WSEL_log),"WSEL"]
yfit_gp = gdwater.gp$fitted[,1][which(!is.na(nall_data$WSEL))]
plot(gdwater.gp)
plot(gdwater.gp,residuals=TRUE)
y_nomis
y_nomis = nall_data[!is.na(nall_data$WSEL_log),"WSEL_log"]
y_nomis = nall_data[!is.na(nall_data$WSEL_log),"WSEL_log"]
yfit_gp = gdwater.gp$fitted[,1][which(!is.na(nall_data$WSEL))]
plot(gdwater.gp)
plot(gdwater.gp,residuals=TRUE)
y_nomis
yfit_gp
yfit_ar = gdwater.ar$fitted[,1][which(!is.na(nall_data$WSEL))]
plot(gdwater.ar)
plot(gdwater.ar,residuals=TRUE)
library("spTimer");
library("maps");
library("colorspace");
data(NYdata)
head(NYdata)
s<-c(8,11,12,14,18,21,24,28)
DataFit<-spT.subset(data=NYdata, var.name=c("s.index"), s=s, reverse=TRUE)
DataFit<-subset(DataFit, with(DataFit, !(Day %in% c(30, 31) & Month == 8)))
head(DataFit)
DataValPred<-spT.subset(data=NYdata, var.name=c("s.index"), s=s)
DataValPred<-subset(DataValPred, with(DataValPred, !(Day %in% c(30, 31) & Month == 8)))
coords<-as.matrix(unique(cbind(DataFit[,2:3])))
pred.coords<-as.matrix(unique(cbind(DataValPred[,2:3])))
map(database="state",regions="new york")
points(coords,pch=19,col=3)
points(coords,pch=1,col=1)
library(tidyverse)
library(lubridate)
library(dplyr)
library(readxl)
# spatial and temporal data analysis packages
library(gstat)
library(sp)
library(spacetime)
#library(rgdal)
library(rgeos)
library(spTimer)
#visualization packages
library(akima)
dt <- read_excel("../Data/groundwater.xlsx")
glimpse(dt)
dt <- dt %>% filter(`Measurement Type`=='Depth') %>% select(Season, Year, Msmt_Date, Latitude, Longitude, WSEL, Basin_ID, Basin_Name)
dim(dt)
dt <- dt %>% mutate(Latitude = round(Latitude, 6), Longitude = round(Longitude,6))
ndt <- dt %>% distinct(Season, Year, Latitude, Longitude, .keep_all = TRUE) %>%
mutate(Month = month(Msmt_Date)) %>%
dplyr::select(Year, Season, Month, Latitude,Longitude, Basin_Name,WSEL)
ndt$place = paste(ndt$Longitude,ndt$Latitude,sep="_")
dim(ndt)
n_distinct(ndt$place) #13820 locations
dim(ndt)
dt_season <- ndt %>% group_by(place, Year, Season) %>% summarise(avg_WSEL = avg(WSEL))
dt_season <- ndt %>% group_by(place, Year, Season) %>% summarise(avg_WSEL = mean(WSEL))
dt_target <- dt_season %>% left_join(ndt)
dim(dt_target)
dim(dt_season)
head(dt_target)
View(dt_target)
rm(dt_target)
rm(dt_season)
test = ndt %>% filter(Basin_Name=='SACRAMENTO VALLEY')
head(test)
cat("afda")
cat("number of wells in Sacromento Valley:", n_distinct(test$place))
loc_df <- as.matrix(unique(test[,c("Longitude","Latitude")]))
fdm <- spT.geodist(loc_df[,1],loc_df[,2])
diag(fdm)<-NA
fdm<-cbind(c(fdm),1:dim(fdm)[[2]],sort(rep(1:dim(fdm)[[1]],dim(fdm)[[2]])))
fdm<-fdm[!is.na(fdm[,1]),]
tol <- 0.08
fdmis<-fdm[fdm[,1] < tol,] #sites too close
site_Todelete = unique(c(fdmis[,2],fdmis[,3]))
cat("number of well locations being too close with each other",length(site_Todelete))
cat("number of wells in Sacromento Valley:", n_distinct(test$place), '\n')
loc_df <- as.matrix(unique(test[,c("Longitude","Latitude")]))
fdm <- spT.geodist(loc_df[,1],loc_df[,2])
diag(fdm)<-NA
fdm<-cbind(c(fdm),1:dim(fdm)[[2]],sort(rep(1:dim(fdm)[[1]],dim(fdm)[[2]])))
fdm<-fdm[!is.na(fdm[,1]),]
tol <- 0.08
fdmis<-fdm[fdm[,1] < tol,] #sites too close
site_Todelete = unique(c(fdmis[,2],fdmis[,3]))
cat("number of well locations being too close with each other",length(site_Todelete),'\n')
cat("number of wells in Sacromento Valley:", n_distinct(test$place), '\n')
loc_df <- as.matrix(unique(test[,c("Longitude","Latitude")]))
fdm <- spT.geodist(loc_df[,1],loc_df[,2])
diag(fdm)<-NA
fdm<-cbind(c(fdm),1:dim(fdm)[[2]],sort(rep(1:dim(fdm)[[1]],dim(fdm)[[2]])))
fdm<-fdm[!is.na(fdm[,1]),]
tol <- 0.08
fdmis<-fdm[fdm[,1] < tol,] #sites too close
site_Todelete = unique(c(fdmis[,2],fdmis[,3]))
cat("number of well locations being too close with each other: ",length(site_Todelete),'\n')
loc_df = as.data.frame(loc_df)
loc_df$site_id = 1:dim(loc_df)[1]
nloc_df = loc_df %>% filter(!site_id %in% site_Todelete)
ntest <- left_join(nloc_df, test)
ntest %>% group_by(Year,Month) %>% summarise(cnt=n())
ntest %>% group_by(Year,Season) %>% summarise(cnt=n())
n_distinct(ntest$place)
N <- n_distinct(ntest$place) #335
Y <- n_distinct(ntest$Year)
all_data <- data.frame(matrix(NA, N*Y*2, 3))
place_ls <- unique(ntest$place)
all_data[,1] <- as.character(rep(place_ls, each = Y*2))
all_data[,2] <- as.numeric(2011:2016, each = 2)
all_data[,3] <- as.numeric(rep(1:2))
colnames(all_data) <- c("place", "Year", "Season")
nall_data <- left_join(all_data, ntest)
N <- n_distinct(ntest$place) #335
Y <- n_distinct(ntest$Year)
all_data <- data.frame(matrix(NA, N*Y*2, 3))
place_ls <- unique(ntest$place)
all_data[,1] <- as.character(rep(place_ls, each = Y*2))
all_data[,2] <- as.numeric(2011:2016, each = 2)
all_data[,3] <- as.numeric(c("Spring","Fall"))
colnames(all_data) <- c("place", "Year", "Season")
nall_data <- left_join(all_data, ntest)
dim(all_data)
335*6*2
head(ntest)
head(all_data)
N <- n_distinct(ntest$place) #335
Y <- n_distinct(ntest$Year)
all_data <- data.frame(matrix(NA, N*Y*2, 3))
place_ls <- unique(ntest$place)
all_data[,1] <- as.character(rep(place_ls, each = Y*2))
all_data[,2] <- as.numeric(2011:2016, each = 2)
all_data[,3] <- as.character(c("Spring","Fall"))
colnames(all_data) <- c("place", "Year", "Season")
nall_data <- left_join(all_data, ntest)
nall_data$Latitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][1]))
nall_data$Longitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][2]))
sample(ntest$place,50,replace = FALSE)
#N <- n_distinct(ntest$place) #335
place_ls <- unique(ntest$place)
sample_locs <- sample(place_ls,50,replace = FALSE)
N <- length(sample_locs)
Y <- n_distinct(ntest$Year)
all_data <- data.frame(matrix(NA, N*Y*2, 3))
all_data[,1] <- as.character(rep(sample_locs, each = Y*2))
all_data[,2] <- as.numeric(2011:2016, each = 2)
all_data[,3] <- as.character(c("Spring","Fall"))
colnames(all_data) <- c("place", "Year", "Season")
nall_data <- left_join(all_data, ntest)
nall_data$Latitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][1]))
nall_data$Longitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][2]))
dim(nall_data)
dim(nall_data)
sum(is.na(nall_data$WSEL))/dim(nall_data)[1] #85%
head(nall_data)
nItr <- 300  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data,
model="GP",
ts <- spT.time(t.series = 2,
segments = 6),
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
dim(nall_data)
sum(is.na(nall_data$WSEL))/dim(nall_data)[1] #85%
head(nall_data)
#N <- n_distinct(ntest$place) #335
place_ls <- unique(ntest$place)
sample_locs <- sample(place_ls,100,replace = FALSE)
N <- length(sample_locs)
Y <- n_distinct(ntest$Year)
all_data <- data.frame(matrix(NA, N*Y*2, 3))
all_data[,1] <- as.character(rep(sample_locs, each = Y*2))
all_data[,2] <- as.numeric(2011:2016, each = 2)
all_data[,3] <- as.character(c("Spring","Fall"))
colnames(all_data) <- c("place", "Year", "Season")
nall_data <- left_join(all_data, ntest)
nall_data$Latitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][1]))
nall_data$Longitude = sapply(nall_data[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][2]))
dim(nall_data)
sum(is.na(nall_data$WSEL))/dim(nall_data)[1] #85%
head(nall_data)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data,
model="GP",
ts <- spT.time(t.series = 2,
segments = 6),
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
scale.transform = "SQRT",
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
sapply(nall_data$WSEL, function(x) ifelse(is.na(x), x, sqrt(x)))
nall_data$WSEL
hist(nall_data$WSEL)
hist(nall_data$WSEL,bins = 10)
hist(nall_data$WSEL,breaks = 10)
hist(nall_data$WSEL, nbins=10)
hist(nall_data$WSEL, )
hist(nall_data$WSEL, nclass = 10)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
nall_data$WSEL_sqrt = sapply(nall_data$WSEL, function(x) ifelse(is.na(x), x, sqrt(x)))
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data,
model="GP",
ts <- spT.time(t.series = 2,
segments = 6),
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
nprint(post.gp)
print(post.gp)
print(gdwater.gp)
summary(gdwater.gp)
plot(gdwater.gp)
plot(gdwater.gp)
gdwater.gp
summary(gdwater.gp)
plot(gdwater.gp)
plot(gdwater.gp)
plot(gdwater.gp)
plot(gdwater.gp)
par(mfrow=c(1,1))
plot(gdwater.gp)
plot(gdwater.gp)
graphics.off()
plot(gdwater.gp)
windows()
plot(gdwater.gp)
plot(gdwater.gp)
dev.off()
plot(gdwater.gp)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
gdwater.gp <- spT.Gibbs(formula= WSEL~ 1, data=nall_data,
model="GP",
ts <- spT.time(t.series = 2,
segments = 6),
coords= ~Longitude + Latitude,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
plot(gdwater.gp)
plot(post.gp, residuals=TRUE)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
library(tidyverse)
library(lubridate)
library(dplyr)
library(readxl)
# spatial and temporal data analysis packages
library(gstat)
library(sp)
library(spacetime)
#library(rgdal)
library(rgeos)
library(coda)
library(spTimer)
#visualization packages
library(akima)
autocorr.diag(as.mcmc(gdwater.gp))
set.seed(11)
N <- n_distinct(ntest$place)
Y <- n_distinct(ntest$Year)
all_grids <- data.frame(matrix(NA, N*Y*2, 3))
all_grids[,1] <- as.character(rep(unique(ntest$Year), each = Y*2))
set.seed(11)
N <- n_distinct(ntest$place)
Y <- n_distinct(ntest$Year)
all_grids <- data.frame(matrix(NA, N*Y*2, 3))
all_grids[,1] <- as.character(rep(unique(ntest$place), each = Y*2))
all_grids[,2] <- as.numeric(2011:2016, each = 2)
all_grids[,3] <- as.character(c("Spring","Fall"))
colnames(all_grids) <- c("place", "Year", "Season")
all_grids <- left_join(all_grids, ntest)
all_grids$Latitude = sapply(all_grids[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][1]))
all_grids$Longitude = sapply(all_grids[,"place"],function(x) as.numeric(strsplit(x, split='_')[[1]][2]))
pred.gp <- predict(post.gp, newdata=all_grids, newcoords=~Longitude+Latitude)
pred.gp <- predict(gdwater.gp, newdata=all_grids, newcoords=~Longitude+Latitude)
spT.validation(nall_data$WSEL,c(pred.gp$Median))
pred.gp$Mean
pred.gp$Median
set.seed(11)
pred.gp <- predict(gdwater.gp, newdata=all_grids, newcoords=~Longitude+Latitude)
test = ndt %>% filter(Basin_Name=='SACRAMENTO VALLEY')
test
spT.validation(nall_data$WSEL[!is,na(nall_data$WSEL)],c(fore.ar$Median[!is,na(nall_data$WSEL)]))
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],c(fore.ar$Median[!is.na(nall_data$WSEL)]))
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],c(gdwater.gp$Median[!is.na(nall_data$WSEL)]))
len(nall_data$WSEL[!is.na(nall_data$WSEL)])
length(nall_data$WSEL[!is.na(nall_data$WSEL)])
gdwater.gp$Median[!is.na(nall_data$WSEL)]
!is.na(nall_data$WSEL)
dim(!is.na(nall_data$WSEL))
dim(nall_data$WSEL)
length(nall_data$WSEL)
length(gdwater.gp$Median)
gdwater.gp$Median
pred.gp$Median
dim(nall_data)
50*24
c(pred.gp$Median)
min(c(pred.gp$Median))
max(c(pred.gp$Median))
nall_data$WSEL[!is.na(nall_data$WSEL)]
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp$fitted[!is.na(nall_data$WSEL)])
gdwater.gp$fitted[!is.na(nall_data$WSEL)]
length(nall_data$WSEL)
length(gdwater.gp$fitted)
hist(nall_data$WSEL)
gdwater.gp$fitted
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp$fitted[!is.na(nall_data$WSEL),"mean"])
gdwater.gp$fitted['mean']
gdwater.gp$fitted[,'mean']
gdwater.gp$fitted[,1]
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp$fitted[,1][!is.na(nall_data$WSEL),"mean"])
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp$fitted[,1][!is.na(nall_data$WSEL)])
head(test)
mean(test$WSEL)
set.seed(11)
ts <- spT.time(t.series = 2, segments = 6)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
priors <- spT.priors(model = "GP", inv.var.prior = Gamma(2,1), beta.prior = Normal(72, 100)) # note that the 72 is the average WSEL from our test data
set.seed(11)
ts <- spT.time(t.series = 2, segments = 6)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
priors <- spT.priors(model = "GP", inv.var.prior = Gamm(2,1), beta.prior = Norm(72, 100)) # note that the 72 is the average WSEL from our test data
gdwater.gp2 <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP", time.data = ts,
coords= ~Longitude + Latitude, priors = priors,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
summary(gdwater.gp2)
summary(gdwater.gp2)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp$fitted[,1][!is.na(nall_data$WSEL)])
summary(gdwater.gp2)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp2$fitted[,1][!is.na(nall_data$WSEL)])
gdwater.gp2$fitted
nall_data$WSEL[nall_data$WSEL<0]
set.seed(11)
ts <- spT.time(t.series = 2, segments = 6)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
priors <- spT.priors(model = "GP", inv.var.prior = Gamm(2,1), beta.prior = Norm(0, 100)) # note that the 72 is the average WSEL from our test data
gdwater.gp2 <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP", time.data = ts,
coords= ~Longitude + Latitude, priors = priors,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
summary(gdwater.gp2)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp2$fitted[,1][!is.na(nall_data$WSEL)])
gdwater.gp2$fitted
sd(nall_data$WSEL)
sd(nall_data$WSEL, rm.na=TRUE)
sd(nall_data$WSEL, na.rm = TRUE)
set.seed(11)
ts <- spT.time(t.series = 2, segments = 6)
nItr <- 1000  # number of MCMC samples for each model, used as 5000 in the paper
nBurn <- 100  # number of burn-in from the MCMC samples, used as 1000 in the paper
priors <- spT.priors(model = "GP", inv.var.prior = Gamm(2,1), beta.prior = Norm(72, 65)) # note that the 72 is the average WSEL from our test data
gdwater.gp2 <- spT.Gibbs(formula= WSEL~ 1, data=nall_data, model="GP", time.data = ts,
coords= ~Longitude + Latitude, priors = priors,
nItr = nItr, nBurn = nBurn,
spatial.decay=spT.decay(distribution=Gamm(2,1),tuning=0.1))
summary(gdwater.gp2)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp2$fitted[,1][!is.na(nall_data$WSEL)])
gdwater.gp2$fitted[,1]
spT.validation(nall_data$WSEL[!is.na(nall_data$WSEL)],gdwater.gp2$fitted[,1][!is.na(nall_data$WSEL)])
set.seed(11)
pred.gp2 <- predict(gdwater.gp2, newdata=all_grids, newcoords=~Longitude+Latitude)
plot(gdwater.gp)
plot(gdwater.gp, residuals=TRUE)
devtools::install_github("brendan-r/brocks")
devtools::install_github('rstudio/blogdown')
blogdown::install_hugo()
setwd("~/R practice")
setwd("C:/Users/jpzha/Desktop/MyBlogs/jpzhangvincent.github.io")
library(blogdown)
build_site()
setwd("C:/Users/jpzha/Desktop/MyBlogs/Test")
serve_site()
serve_site()
setwd("C:/Users/jpzha/Desktop/MyBlogs/jpzhangvincent.github.io")
serve_site()
serve_site()
serve_site()
setwd("C:/Users/jpzha/Desktop/MyBlogs/Test/themes/hugo-creative-portfolio-theme")
serve_site()
setwd("C:/Users/jpzha/Desktop/MyBlogs/Test")
setwd("C:/Users/jpzha/Desktop/MyBlogs/Test")
serve_site()
setwd("C:/Users/jpzha/Desktop/MyBlogs/jpzhangvincent.github.io")
serve_site()
