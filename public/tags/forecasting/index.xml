<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forecasting on Vincent Zhang</title>
    <link>/tags/forecasting/index.xml</link>
    <description>Recent content in Forecasting on Vincent Zhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;2016 Vincent Zhang</copyright>
    <atom:link href="/tags/forecasting/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Forecasting Air Quality in Beijing with Prophet</title>
      <link>/blog/ChinaAirQualityAnalysis2/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/ChinaAirQualityAnalysis2/</guid>
      <description>---
date: &#34;2016-01-10&#34;
title: &#34;Forecasting Air Quality in Beijing with Prophet&#34;
showonlyimage: false
draft: false
image: &#34;blog/img/ForecastingProphet.JPG&#34;
weight: 0
type: &#34;post&#34;
author: &#34;Vincent Zhang&#34;
description: &#34;PART II - Forecasting Air quality in Beijing.&#34;
tags: [&#34;Forecasting&#34;, &#34;R&#34;, &#34;TimeSeries&#34;, &#34;AirQuality&#34;]
---


&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modeling&#34;&gt;Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#closing-remarks&#34;&gt;Closing Remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;It’s been a while since I updated my last blog post about exploratory data anlysis for air quality in Chinese cities. I finally got time to finish this blog post series. In this blog post, I will focus on the following modeling questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can we forecast the air quality in Beijing?&lt;/li&gt;
&lt;li&gt;How to measure the impact of Spring festival for the air quality in Beijing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With time series analysis and forecasting, we can study and quantify the causal impacts of the seasonal and holiday effects on air quality. Besides, one important fact about Spring Festival is that it’s the biggest time for migration, reunion and celebration, as you can know more from this interesting BBC documentary &lt;a href=&#34;http://en.videochina.tv/2016/0729/4181.shtml&#34;&gt;Chinese New Year: The Biggest Celebration on Earth&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;library-setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Library Setup&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# API scraping
library(ropenaq) # sourced from OpenAQ, see https://github.com/ropensci/ropenaq
# Data Munging
library(tidyverse)
library(lubridate)
# Data Visualization
library(ggplot2)
# Time Series Analysis
library(xts)
library(seasonal)
library(prophet)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data&lt;/h1&gt;
&lt;p&gt;First, we collect the data using the &lt;code&gt;OpenAQ&lt;/code&gt; API, which is one of the ROpenSci projects. The date ranges from 2013-11-26 to 2017-03-27.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;how_many &amp;lt;- attr(aq_measurements(city = &amp;quot;Beijing&amp;quot;), &amp;quot;meta&amp;quot;)
n &amp;lt;- how_many$found
results_ls &amp;lt;- list()
# Limit is 1000 observations at once, so we bring them all in 1000 at a time:
for(i in 1:ceiling(n / 1000)){
   results_ls[[i]] &amp;lt;- aq_measurements(country = &amp;quot;CN&amp;quot;, city = &amp;quot;Beijing&amp;quot;, parameter = &amp;quot;pm25&amp;quot;,
                                      limit = 1000, page = i)   
   cat(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 12345678910111213141516171819202122232425&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# convert into a data frame:
results_df &amp;lt;- do.call(&amp;quot;rbind&amp;quot;, results_ls) %&amp;gt;% arrange(dateLocal)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the air quality is measured at different times in Beijing each day, to forecast the overall trend, we want to aggregate the data on a daily basis for the time series.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bj_df &amp;lt;- results_df %&amp;gt;% filter(value &amp;gt; 0) %&amp;gt;% mutate(Day = as.Date(dateLocal)) %&amp;gt;%   
  group_by(Day) %&amp;gt;% summarise(avg_AQ = mean(value, tr = 0.1, na.rm = TRUE)) %&amp;gt;% ungroup()

tail(bj_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 × 2
##          Day    avg_AQ
##       &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 2017-03-23 126.33333
## 2 2017-03-24  67.05000
## 3 2017-03-25  35.60000
## 4 2017-03-26  11.70000
## 5 2017-03-27  13.31579
## 6 2017-03-28  49.83333&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the crude time series, we can spot that some high peaks are around the end of years. Note that there exists some gaps in the time series too, which causes a challenge to directly apply generative time series model, like ARIMA model.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bj_df %&amp;gt;% 
  ggplot(aes(x = Day, y = avg_AQ)) + geom_line() +
  ggtitle(&amp;quot;Daily PM 2.5 Trend in Beijing&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/blog/ChinaAirQualityAnalysis2_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modeling&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Modeling&lt;/h1&gt;
&lt;p&gt;I decided to play with a recent forecasting tool &lt;code&gt;Prophet&lt;/code&gt; by Facebook, which is originated from their research &lt;a href=&#34;https://facebookincubator.github.io/prophet/static/prophet_paper_20170113.pdf&#34;&gt;“Forecasting at Scale”&lt;/a&gt;. From their introduction, &lt;code&gt;Prophet&lt;/code&gt; is robust to missing data, shifts in the trend, and large outliers. It would be interesting to test the claim. The underlying engine for the tool is bayesian probabilistic modeling(Stan) with the generalized additive model(GAM) framework. Bayesian probabilistic modeling in Stan is amazing in that you can fit pretty much any model you can describe in an equation. The fitting and forecasting process is based on the following formula:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y(t) = g(t) + s(t) + h(t) +\epsilon(t)
\]&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(y(t)\)&lt;/span&gt; is the time series values, &lt;span class=&#34;math inline&#34;&gt;\(g(t)\)&lt;/span&gt; represents our growth function which models non-periodic changes in the value of the time series, &lt;span class=&#34;math inline&#34;&gt;\(s(t)\)&lt;/span&gt; represents periodic changes due to weekly or yearly seasonality, and h(t) represents the effects of holidays which occur on potentially irregular schedules over one more days. The error term &lt;span class=&#34;math inline&#34;&gt;\(\epsilon(t)\)&lt;/span&gt; represents any idiosyncratic changes which are not accommodated by our model and follows normal distribution. This approach frames the forecasting problem as a curve-fitting exercise with time as the only regressor through linear or nonlinear functions. This GAM formulation is inherently different from time series models that explicitly account for the temporal dependence structure in the data.&lt;/p&gt;
&lt;p&gt;As detailed in the paper, while we sacrifice some important inferential advantages of using a generative model such as an ARIMA, the probabilistic modeling framework has some practical advantages:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The formulation is flexible: we can easily accommodate seasonality with multiple periods and different assumptions about trends.&lt;/li&gt;
&lt;li&gt;Unlike with ARIMA models, the time series measurements need not have a regular period and we do not need to interpolate missing values to fit.&lt;/li&gt;
&lt;li&gt;Fitting is very fast, allowing the analyst to interactively explore many model specifications, for example in a Shiny application.&lt;/li&gt;
&lt;li&gt;The forecasting model has easily interpretable parameters that can be changed heuristically by the analyst to impose assumptions on the forecast.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prophet requires one column named &lt;code&gt;ds&lt;/code&gt; with dates or datetimes, and one column named &lt;code&gt;y&lt;/code&gt; with numeric values. We would need to do a &lt;em&gt;log&lt;/em&gt; transformation on the y value for the statistical purposes of stablizing the variance and normality assumption for modeling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bj_df &amp;lt;- bj_df %&amp;gt;% rename(ds = Day, y = avg_AQ) %&amp;gt;% mutate( y = log(y))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to denote the times for the historical spring festival periods in the specialized column named “holiday” as the input. First, I found the individual historical spring festival dates from 2014 to 2017. Furthermore, we would prefer to study the effect of spring festival as a period since the most massive traffic and celebration activities would happened during the period. From the official document, we are able to include columns &lt;code&gt;lower_window&lt;/code&gt; and &lt;code&gt;upper_window&lt;/code&gt; which extend the holiday out to “[lower_window, upper_window]” days around the date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sf_dates &amp;lt;- as.Date(c(&amp;#39;2014-01-31&amp;#39;, &amp;#39;2015-02-19&amp;#39;, &amp;#39;2016-02-08&amp;#39;, &amp;#39;2017-01-28&amp;#39;))
holidays_df &amp;lt;- bj_df %&amp;gt;% filter(ds %in% sf_dates) %&amp;gt;% mutate(holiday = &amp;#39;SpringFestival&amp;#39;) %&amp;gt;% 
  mutate(lower_window = -7,upper_window= 7)%&amp;gt;% 
  select(ds, holiday, lower_window, upper_window)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we split the time series for fitting and forecasting to evaluate the model performance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fit_df &amp;lt;- bj_df %&amp;gt;% filter(ds &amp;lt;= &amp;#39;2016-12-31&amp;#39;)
forecast_df &amp;lt;- bj_df %&amp;gt;% filter(ds &amp;gt; &amp;#39;2016-12-31&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s quite straightforward to fit the time series after we prepared the data. But there are couple nuances. To estimate the uncertainty in trend, we can specify the &lt;code&gt;interval.width&lt;/code&gt;. Also, it would be nice to get the estimates for uncertainty in seasonality by configuring the &lt;code&gt;mcmc.samples&lt;/code&gt; so that it would give the estimated weekly and yearly seasonal effects. The &lt;code&gt;make_future_dataframe&lt;/code&gt; function takes the model object and a number of periods to forecast and produces a suitable dataframe. By default it will also include the historical dates so we can evaluate in-sample fit.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;num_to_forecast &amp;lt;- n_distinct(forecast_df$ds) # number of dates for forecasting
m &amp;lt;- prophet(fit_df, interval.width = 0.95, holidays = holidays_df, mcmc.samples = 500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## SAMPLING FOR MODEL &amp;#39;prophet_linear_growth&amp;#39; NOW (CHAIN 1).
## 
## Chain 1, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 1, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 1, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 1, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 1, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 1, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 1, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 1, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 1, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 1, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 1, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 1, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 12.1 seconds (Warm-up)
##                9.102 seconds (Sampling)
##                21.202 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 1&amp;quot;
##                                                                                 count
## Exception thrown at line 46: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     3
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;
## 
## SAMPLING FOR MODEL &amp;#39;prophet_linear_growth&amp;#39; NOW (CHAIN 2).
## 
## Chain 2, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 2, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 2, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 2, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 2, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 2, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 2, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 2, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 2, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 2, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 2, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 2, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 11.548 seconds (Warm-up)
##                9.552 seconds (Sampling)
##                21.1 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 2&amp;quot;
##                                                                                 count
## Exception thrown at line 46: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     2
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;
## 
## SAMPLING FOR MODEL &amp;#39;prophet_linear_growth&amp;#39; NOW (CHAIN 3).
## 
## Chain 3, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 3, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 3, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 3, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 3, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 3, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 3, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 3, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 3, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 3, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 3, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 3, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 12.6 seconds (Warm-up)
##                9.786 seconds (Sampling)
##                22.386 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 3&amp;quot;
##                                                                                 count
## Exception thrown at line 46: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     2
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;
## 
## SAMPLING FOR MODEL &amp;#39;prophet_linear_growth&amp;#39; NOW (CHAIN 4).
## 
## Chain 4, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 4, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 4, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 4, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 4, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 4, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 4, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 4, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 4, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 4, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 4, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 4, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 11.096 seconds (Warm-up)
##                9.784 seconds (Sampling)
##                20.88 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 4&amp;quot;
##                                                                                 count
## Exception thrown at line 46: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     3
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;future &amp;lt;- make_future_dataframe(m, periods = num_to_forecast+1)
tail(future)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              ds
## 1040 2017-03-23
## 1041 2017-03-24
## 1042 2017-03-25
## 1043 2017-03-26
## 1044 2017-03-27
## 1045 2017-03-28&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with most modeling procedures in R, we can use the generic predict function to get our forecast. The forecast object is a dataframe with a column &lt;code&gt;yhat&lt;/code&gt; containing the forecast. It has additional columns for uncertainty intervals and seasonal components.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forecast &amp;lt;- predict(m, future)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can evaluate our model via the convinient build-in visualization functions. The following plot shows the forecasts with the actual data points. The most obvious fuctuations are for the holiday periods that we were trying to fit. It seems overall the forecasts capture the trend reasonably.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(m, forecast)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/blog/ChinaAirQualityAnalysis2_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The following is the component effects for the time series plots. Considering the uncetainty intervals, we can see that overall there is a decreasing trend from 2014 to 2016 but the air quality is getting serious again after 2016. Since the intervals for the holidays effects are quite narrow and have high impacts(large absolute values), it gives us more confidence to say the holiday effect is significant for the time series fitting. However, the day of week effect is not necessarily significant. And the yearly seasonal effect is also apparent that the winter season November to Janually tends to have positive impact on high popultion levels while the September is usually the month with the best air quality.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prophet_plot_components(m, forecast)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/blog/ChinaAirQualityAnalysis2_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s delve deeper to investigate the holiday effect. It shows that indeed the first day in a spring festival usually have highest impacts on increasing air pollution levels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forecast %&amp;gt;% 
  select(ds, SpringFestival) %&amp;gt;% filter(SpringFestival &amp;gt; 0) %&amp;gt;% 
  arrange(desc(SpringFestival)) %&amp;gt;% 
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            ds SpringFestival
## 1  2014-01-31      1.1962072
## 2  2015-02-19      1.1962072
## 3  2016-02-08      1.1962072
## 4  2017-01-28      1.1962072
## 5  2014-02-01      0.6943397
## 6  2016-02-09      0.6943397
## 7  2017-01-29      0.6943397
## 8  2015-02-14      0.6187398
## 9  2016-02-03      0.6187398
## 10 2017-01-23      0.6187398&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can calculate the MAE(mean absolute error) and MAPE (mean absolute percentage error) as a measure for forecast accuracy. The metrics looks promising while there’s still room for improvement. However, I might be also supposed to add a baseline ARIMA model for comparison. I will complete the part of model comparision later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fore_values &amp;lt;- forecast[forecast$ds &amp;gt; &amp;#39;2016-12-31&amp;#39;,]$yhat
true_values &amp;lt;- forecast_df$y
cat(&amp;quot;The MAE is &amp;quot;, mean(abs(true_values - fore_values)), &amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The MAE is  1.0346&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(&amp;quot;The MAPE is &amp;quot;, mean(abs((true_values - fore_values)/true_values)), &amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The MAPE is  0.3168523&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To improve our model, We could also try to use the nonlinear growth specification(&lt;code&gt;growth&lt;/code&gt; = ‘logistic’). What’s more, based on the form of logistic growth curve: &lt;span class=&#34;math display&#34;&gt;\[
g(t) = \frac{C}{1+e^{-k(t-b)}}
\]&lt;/span&gt; the &lt;span class=&#34;math inline&#34;&gt;\(C\)&lt;/span&gt; means the capacity of the growth, which can be time dependent. In &lt;code&gt;prophet&lt;/code&gt;, we can manually specify “capacities” or the upper limit of the growth curve, allowing us to inject our own prior information about how the forecast will grow (or decline). Empiricaly saying, let’s simply use the historically 90 percentiles of monthly air quality index as the time-dependent “capacities”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cap_by_mon &amp;lt;- bj_df %&amp;gt;% mutate(mon = month(ds)) %&amp;gt;% group_by(mon) %&amp;gt;% summarise(cap = quantile(y, 0.90)) 
nbj_df &amp;lt;- bj_df %&amp;gt;% mutate(mon = month(ds)) %&amp;gt;% left_join(cap_by_mon, by = &amp;quot;mon&amp;quot;) %&amp;gt;% select(-mon)
fit_df &amp;lt;- nbj_df %&amp;gt;% filter(ds &amp;lt;= &amp;#39;2016-12-31&amp;#39;) # split again
forecast_df &amp;lt;- nbj_df %&amp;gt;% filter(ds &amp;gt; &amp;#39;2016-12-31&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m2 &amp;lt;- prophet(fit_df, interval.width = 0.95, holidays = holidays_df, mcmc.samples = 500, growth = &amp;quot;logistic&amp;quot;,   seasonality.prior.scale = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## SAMPLING FOR MODEL &amp;#39;prophet_logistic_growth&amp;#39; NOW (CHAIN 1).
## 
## Chain 1, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 1, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 1, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 1, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 1, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 1, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 1, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 1, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 1, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 1, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 1, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 1, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 11.81 seconds (Warm-up)
##                11.422 seconds (Sampling)
##                23.232 seconds (Total)
## 
## 
## SAMPLING FOR MODEL &amp;#39;prophet_logistic_growth&amp;#39; NOW (CHAIN 2).
## 
## Chain 2, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 2, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 2, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 2, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 2, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 2, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 2, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 2, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 2, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 2, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 2, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 2, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 12.535 seconds (Warm-up)
##                6.148 seconds (Sampling)
##                18.683 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 2&amp;quot;
##                                                                                 count
## Exception thrown at line 69: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     3
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;
## 
## SAMPLING FOR MODEL &amp;#39;prophet_logistic_growth&amp;#39; NOW (CHAIN 3).
## 
## Chain 3, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 3, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 3, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 3, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 3, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 3, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 3, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 3, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 3, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 3, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 3, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 3, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 12.311 seconds (Warm-up)
##                6.247 seconds (Sampling)
##                18.558 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 3&amp;quot;
##                                                                                 count
## Exception thrown at line 69: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     3
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;
## 
## SAMPLING FOR MODEL &amp;#39;prophet_logistic_growth&amp;#39; NOW (CHAIN 4).
## 
## Chain 4, Iteration:   1 / 500 [  0%]  (Warmup)
## Chain 4, Iteration:  50 / 500 [ 10%]  (Warmup)
## Chain 4, Iteration: 100 / 500 [ 20%]  (Warmup)
## Chain 4, Iteration: 150 / 500 [ 30%]  (Warmup)
## Chain 4, Iteration: 200 / 500 [ 40%]  (Warmup)
## Chain 4, Iteration: 250 / 500 [ 50%]  (Warmup)
## Chain 4, Iteration: 251 / 500 [ 50%]  (Sampling)
## Chain 4, Iteration: 300 / 500 [ 60%]  (Sampling)
## Chain 4, Iteration: 350 / 500 [ 70%]  (Sampling)
## Chain 4, Iteration: 400 / 500 [ 80%]  (Sampling)
## Chain 4, Iteration: 450 / 500 [ 90%]  (Sampling)
## Chain 4, Iteration: 500 / 500 [100%]  (Sampling)
##  Elapsed Time: 11.647 seconds (Warm-up)
##                7.311 seconds (Sampling)
##                18.958 seconds (Total)
## 
## [1] &amp;quot;The following numerical problems occured the indicated number of times after warmup on chain 4&amp;quot;
##                                                                                 count
## Exception thrown at line 69: normal_log: Scale parameter is 0, but must be &amp;gt; 0!     3
## [1] &amp;quot;When a numerical problem occurs, the Hamiltonian proposal gets rejected.&amp;quot;
## [1] &amp;quot;See http://mc-stan.org/misc/warnings.html#exception-hamiltonian-proposal-rejected&amp;quot;
## [1] &amp;quot;If the number in the &amp;#39;count&amp;#39; column is small,  do not ask about this message on stan-users.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;future2 &amp;lt;- make_future_dataframe(m2, periods = num_to_forecast+1)
future2 &amp;lt;- future2 %&amp;gt;% mutate(mon = month(ds)) %&amp;gt;% left_join(cap_by_mon, by = &amp;quot;mon&amp;quot;) %&amp;gt;% select(-mon)
forecast2 &amp;lt;- predict(m2, future2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(m2, forecast2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/blog/ChinaAirQualityAnalysis2_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prophet_plot_components(m2, forecast2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;#####../content/blog/ChinaAirQualityAnalysis2_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fore_values &amp;lt;- forecast2[forecast2$ds &amp;gt; &amp;#39;2016-12-31&amp;#39;,]$yhat
true_values &amp;lt;- forecast_df$y
cat(&amp;quot;The MAE is &amp;quot;, mean(abs(true_values - fore_values)), &amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The MAE is  1.045254&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cat(&amp;quot;The MAPE is &amp;quot;, mean(abs((true_values - fore_values)/true_values)), &amp;#39;\n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The MAPE is  0.3234382&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems the logistic growth doesn’t help improve the forecasts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;closing-remarks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Closing Remarks&lt;/h1&gt;
&lt;p&gt;From our analysis, we show that winter season has the highest impact on increasing the air pollution level and the Spring Festival is a significant holiday effect. Our forecasting model seems to capture the seasonal trend well while not overfitting, and has satisfying prediction performance. Using Prophet to generate predictions turned out to be very easy, and there are several ways to adjust the predictions and inspect the results. It’s really useful without fixing input data that has gaps or timestamps in the wrong format. Prophet hits the sweet spot of predictive power versus ease of use.&lt;/p&gt;
&lt;/div&gt;


&lt;!-- dynamically load mathjax for compatibility with self-contained --&gt;
&lt;script&gt;
  (function () {
    var script = document.createElement(&#34;script&#34;);
    script.type = &#34;text/javascript&#34;;
    script.src  = &#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;;
    if (location.protocol !== &#34;file:&#34; &amp;&amp; /^https?:/.test(script.src))
      script.src  = script.src.replace(/^https?:/, &#39;&#39;);
    document.getElementsByTagName(&#34;head&#34;)[0].appendChild(script);
  })();
&lt;/script&gt;

&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>